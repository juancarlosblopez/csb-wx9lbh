{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API_PATH","sampleGet","axios","get","then","res","console","log","state","key","data","user","userName","samplePost","result2","post","err","App","props","handleFormSubmit","e","preventDefault","method","url","headers","result","setState","dataSent","sent","catch","error","message","className","action","type","id","name","placeholder","value","this","onChange","target","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sUAaMA,EAAW,kDAEXC,EAAS,iDAAG,wGACKC,IAAMC,IAAIH,GAAUI,MAAK,SAACC,GAC7CC,QAAQC,IAAIF,GACZ,EAAKG,MAAM,CAAEC,IAAKJ,EAAIK,UAHR,yDAAH,qDAOTC,EAAO,CACXC,SAAU,UAGNC,EAAU,iDAAG,8FACjB,IACQC,EAAUZ,IAAMa,KAAKf,EAAU,CAAEW,SAAQP,MAAK,SAACC,GACnDC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAIK,SAElBJ,QAAQC,IAAIO,GACZ,MAAOE,GACPV,QAAQC,IAAI,OAAQS,GARL,2CAAH,qDA+EDC,E,kDAlEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAcRC,iBAAmB,SAACC,GAClBA,EAAEC,iBACFnB,IAAM,CACJoB,OAAQ,OACRC,IAAI,GAAD,OAAKvB,GACRwB,QAAS,CAAE,eAAgB,oBAC3Bd,KAAM,EAAKF,QAEVJ,MAAK,SAACqB,GACL,EAAKC,SAAS,CACZC,SAAUF,EAAOf,KAAKkB,UAGzBC,OAAM,SAACC,GAAD,OAAW,EAAKJ,SAAS,CAAEI,MAAOA,EAAMC,aACjDzB,QAAQC,IAAI,EAAKC,QA3BjB,EAAKA,MAAQ,CACXI,SAAU,GACVH,IAAK,IAJU,E,0CAgCnB,WAAU,IAAD,OACP,OACE,qBAAKuB,UAAU,MAAf,SACE,uBAAMC,OAAO,mBAAb,UACE,kDACA,6CACA,uBACEC,KAAK,OACLC,GAAG,WACHC,KAAK,WACLC,YAAY,kBACZC,MAAOC,KAAK/B,MAAMI,SAClB4B,SAAU,SAACpB,GAAD,OAAO,EAAKM,SAAS,CAAEd,SAAUQ,EAAEqB,OAAOH,WAEtD,uBACEJ,KAAK,SACLQ,QAAS,SAACtB,GAAD,OAAO,EAAKD,iBAAiBC,IACtCkB,MAAM,WAGR,wBAAQI,QAASzC,EAAjB,iBACA,wBAAQyC,QAAS7B,EAAjB,kBAEA,8BACG0B,KAAK/B,MAAMmB,UAAY,yE,GAzDlBgB,aC1BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,MAAK,SAAAoD,GACjCA,EAAaC,kB","file":"static/js/main.9668fef6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n//import ConversationsApp from './ConversationsApp';\nimport \"./assets/App.css\";\nimport \"antd/dist/antd.css\";\nimport axios from \"axios\";\n\n/*\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n  */\n\nconst API_PATH = \"https://cerevent.com/Twilio/createTokentest.php\";\n\nconst sampleGet = async () => {\n  const result = await axios.get(API_PATH).then((res) => {\n    console.log(res);\n    this.state({ key: res.data });\n  });\n};\n\nconst user = {\n  userName: \"jlopez\"\n};\n\nconst samplePost = async () => {\n  try {\n    const result2 = axios.post(API_PATH, { user }).then((res) => {\n      console.log(res);\n      console.log(res.data);\n    });\n    console.log(result2);\n  } catch (err) {\n    console.log(\"err:\", err);\n  }\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: \"\",\n      key: \"\"\n    };\n  }\n\n  /*\n  handleFormSubmit( event ) {\n  event.preventDefault();\n  console.log(this.state);\n  }\n  */\n\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n    axios({\n      method: \"post\",\n      url: `${API_PATH}`,\n      headers: { \"content-type\": \"application/json\" },\n      data: this.state\n    })\n      .then((result) => {\n        this.setState({\n          dataSent: result.data.sent\n        });\n      })\n      .catch((error) => this.setState({ error: error.message }));\n    console.log(this.state);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <form action=\"/action_page.php\">\n          <h1>Test Application</h1>\n          <label>Username</label>\n          <input\n            type=\"text\"\n            id=\"userName\"\n            name=\"userName\"\n            placeholder=\"Your username..\"\n            value={this.state.userName}\n            onChange={(e) => this.setState({ userName: e.target.value })}\n          />\n          <input\n            type=\"submit\"\n            onClick={(e) => this.handleFormSubmit(e)}\n            value=\"Submit\"\n          />\n\n          <button onClick={sampleGet}>GET</button>\n          <button onClick={samplePost}>Post</button>\n\n          <div>\n            {this.state.dataSent && <div>Thank you for contcting us.</div>}\n          </div>\n        </form>\n      </div>\n    );\n\n    //return <ConversationsApp />\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}